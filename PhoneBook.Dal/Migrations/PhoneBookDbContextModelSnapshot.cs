// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PhoneBook.Dal;
using PhoneBook.Dal.Enums;

#nullable disable

namespace PhoneBook.Dal.Migrations
{
    [DbContext(typeof(PhoneBookDbContext))]
    partial class PhoneBookDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "gender_type", new[] { "none", "male", "female" });
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GroupDbUserDb", b =>
                {
                    b.Property<Guid>("GroupsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid");

                    b.HasKey("GroupsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("GroupDbUserDb", (string)null);
                });

            modelBuilder.Entity("PhoneBook.Dal.Models.AddressDb", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Block")
                        .HasColumnType("text")
                        .HasColumnName("block");

                    b.Property<string>("City")
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_utc");

                    b.Property<int?>("Flat")
                        .HasColumnType("integer")
                        .HasColumnName("flat");

                    b.Property<int?>("House")
                        .HasColumnType("integer")
                        .HasColumnName("house");

                    b.Property<string>("Region")
                        .HasColumnType("text")
                        .HasColumnName("region");

                    b.Property<string>("Street")
                        .HasColumnType("text")
                        .HasColumnName("street");

                    b.Property<DateTime>("UpdatedUtc")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_utc");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUtc");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("address", (string)null);
                });

            modelBuilder.Entity("PhoneBook.Dal.Models.GroupDb", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_utc");

                    b.Property<DateTime?>("DeletedUtc")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_utc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedUtc")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_utc");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUtc");

                    b.HasIndex("DeletedUtc");

                    b.ToTable("group", (string)null);
                });

            modelBuilder.Entity("PhoneBook.Dal.Models.PhoneCategoryDb", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_utc");

                    b.Property<DateTime?>("DeletedUtc")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_utc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedUtc")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_utc");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUtc");

                    b.HasIndex("DeletedUtc");

                    b.ToTable("phone_category", (string)null);
                });

            modelBuilder.Entity("PhoneBook.Dal.Models.PhoneDataDb", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_utc");

                    b.Property<DateTime?>("DeletedUtc")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_utc");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedUtc");

                    b.HasIndex("DeletedUtc");

                    b.HasIndex("UserId");

                    b.ToTable("phone_data", (string)null);
                });

            modelBuilder.Entity("PhoneBook.Dal.Models.UserDb", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_utc");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_of_birth");

                    b.Property<DateTime?>("DeletedUtc")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_utc");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<GenderType>("Gender")
                        .HasColumnType("gender_type")
                        .HasColumnName("gender");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text")
                        .HasColumnName("middle_name");

                    b.Property<DateTime>("UpdatedUtc")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_utc");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUtc");

                    b.HasIndex("DeletedUtc");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("GroupDbUserDb", b =>
                {
                    b.HasOne("PhoneBook.Dal.Models.GroupDb", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhoneBook.Dal.Models.UserDb", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PhoneBook.Dal.Models.AddressDb", b =>
                {
                    b.HasOne("PhoneBook.Dal.Models.UserDb", "User")
                        .WithOne("Address")
                        .HasForeignKey("PhoneBook.Dal.Models.AddressDb", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PhoneBook.Dal.Models.PhoneDataDb", b =>
                {
                    b.HasOne("PhoneBook.Dal.Models.PhoneCategoryDb", "Category")
                        .WithMany("Phones")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhoneBook.Dal.Models.UserDb", "User")
                        .WithMany("Phones")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PhoneBook.Dal.Models.PhoneCategoryDb", b =>
                {
                    b.Navigation("Phones");
                });

            modelBuilder.Entity("PhoneBook.Dal.Models.UserDb", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Phones");
                });
#pragma warning restore 612, 618
        }
    }
}
